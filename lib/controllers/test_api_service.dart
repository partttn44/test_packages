import 'dart:convert';
import 'dart:developer';

import 'package:flutter/services.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';

import '../models/json_serializable_model.dart';

class TestApiService {
  late Future<Isar> db;

  TestApiService() {
    db = _init();
  }
  Future<Isar> _init() async {
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á instance ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏ä‡∏∑‡πà‡∏≠ default)
    final existing = Isar.getInstance('foods_test');
    if (existing != null) return existing;

    final dir = await getApplicationDocumentsDirectory();
    return await Isar.open([FoodSchema],
        directory: dir.path, name: 'foods_test');
  }

  Future<FoodDataModel> fetchData() async {
    log('fetchData');
    final jsonString = await rootBundle.loadString('assets/data_test.json');
    final jsonMap = json.decode(jsonString);
    final data = FoodDataModel.fromJson(jsonMap);
    final isar = await db;

    final newFoods = data.result.food;
    final newFoodIds = newFoods.map((f) => f.foodId).toSet();

    await isar.writeTxn(() async {
      // üîπ 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å DB
      final existingFoods = await isar.foods.where().findAll();

      // üîπ 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      final toDeleteIds = existingFoods
          .where((f) => !newFoodIds.contains(f.foodId))
          .map((f) => f.id)
          .toList();

      if (toDeleteIds.isNotEmpty) {
        await isar.foods.deleteAll(toDeleteIds);
        print('‡∏•‡∏ö ${toDeleteIds.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤');
      }

      // üîπ 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      final existingFoodMap = {
        for (var e in existingFoods) e.foodId: e,
      };

      for (int i = 0; i < newFoods.length; i++) {
        final newFood = newFoods[i];

        newFood.sortingIndex = i; // ‚úÖ ‡πÉ‡∏™‡πà index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö JSON

        if (existingFoodMap.containsKey(newFood.foodId)) {
          newFood.id = existingFoodMap[newFood.foodId]!.id; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        }
      }

      await isar.foods.putAll(newFoods); // ‡πÄ‡∏û‡∏¥‡πà‡∏° + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      print('‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${newFoods.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    });

    return data;
  }

  Future<List<Food>> getFoods() async {
    log('get foods');
    final isar = await db;
    final foods = await isar.foods.where().sortBySortingIndex().findAll();
    print('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô food ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${foods.length}');
    return foods;
  }
}
